
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

"""
Purpose
An AWS lambda function that analyzes documents with Amazon Textract.
"""
import json
import base64
import logging
import boto3
from jpg_converter import JpgConverter
from jpeg_converter import JpegConverter
from png_converter import PngConverter
from pdf_converter import PdfConverter
from csv_converter import CsvConverter
from botocore.exceptions import ClientError

# Set up logging.
# 
# logging.basicConfig(level=logging.INFO) 
logger = logging.getLogger()
logger.setLevel(logging.INFO)
region_name = 'us-east-2'


def lambda_handler(event, context):
    """
    Lambda handler function
    param: event: The event object for the Lambda function.
    param: context: The context object for the lambda function.
    return: The list of Block objects recognized in the document
    passed in the event object.
    """
    logger.info('start')
    try:
        
        logger.info(event)
        
        
        # Determine document source.
        if 'image' in event:
            # Decode the image
            image_bytes = event['image'].encode('utf-8')
            img_b64decoded = base64.b64decode(image_bytes)
            image = {'Bytes': img_b64decoded}


        elif 'S3Object' in event:
            image = {'S3Object':
                     {'Bucket':  event['S3Object']['Bucket'],
                      'Name': event['S3Object']['Name']}
                     }
            logger.info(image)

        else:
            raise ValueError(
                'Invalid source. Only image base 64 encoded image bytes or S3Object are supported.')
        
        jpeg = JpegConverter(region_name)
        response = jpeg.converter(image)
        pdf=PdfConverter(region_name)
        response=pdf.extractTextFromPdf(image)
        # Get the Blocks
        blocks = response['Blocks']

        lambda_response = {
            "statusCode": 200,
            "body": json.dumps(blocks)
        }
        csv=CsvConverter(blocks,event['S3Object']['Bucket'],event['S3Object']['output'])
        status_code=csv.csv_handler()
        
        # lambda_response = {
        #     "statusCode": status_code,
        #     "body": "Sucessfully csv file created"
        # }
        
    except ClientError as err:
        print('clientError started')
        error_message = "Couldn't analyze image. " + \
            err.response['Error']['Message']

        lambda_response = {
            'statusCode': 400,
            'body': {
                "Error": err.response['Error']['Code'],
                "ErrorMessage": error_message
            }
        }
        logger.error("Error function %s: %s",
            context.invoked_function_arn, error_message)
        print('clientError ended')

    except ValueError as val_error:
        print('valueError started')
        lambda_response = {
            'statusCode': 400,
            'body': {
                "Error": "ValueError",
                "ErrorMessage": format(val_error)
            }
        }
        logger.error("Error function %s: %s",
            context.invoked_function_arn, format(val_error))
        print('valueError ended')
    
    logger.info('end')
    return lambda_response


